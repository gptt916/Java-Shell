==== A2 phase I marking ====

Group number: 0313
UTORID usernames of members: chengj38, gongyi2, patelm55, shahtirt
TA: Akshay Nair <akshay.nair@mail.utoronto.ca>

Total deductions: 18 (Grade: F)
Instructor bonus: +2
Final deductions: 16 (Grade: F)

============================

Your team's Phase II grade is based on this scale:

    http://www.artsandscience.utoronto.ca/ofr/calendar/rules.htm#grading

The way we graded is as follows: your team starts with an A+. When errors and
problems are found, you will lose 0, 1, 2, or 3 letter steps, depending on the
severity. As an example, if you lost two steps, your team would earn an A-:

     A+ -> A
     A -> A-

==== Product and Sprint backlogs ==== [up to -6]

Mark: 0

Mark deductions: None

Other comments:
- Some PB items are unrealistic or irrelevant. (e.g. "manage the file system" being 20 days -- this is essentially the whole program and this is not a user story) (-0.5)

==== Java Style ==== [up to -6]

Mark: -2

Mark deductions:
- Many methods don't follow camelCase (-1)
- Command classes are not semantic and they don't have the proper capitalization. (-1)

==== Design ==== [up to -6]

Mark: -4

Mark deductions:
- JShell's main method is far too long. You should shorten this by use of a hash table to store command strings and appropriate classes to handle all of your command code. (-1)

- It is too hard to add new commands. You must manually add it to the man command and to a messy if statement in JShell. Consider using a hash table and reflection instead. (-0.5)

- Print statements all throughout your code. This makes it so you cannot manipulate your output. Consider using exceptions or string concatenation instead. (-0.5)

- Path handling is not unified. You have it all over your command classes. (-1.5)

- You overuse the singleton design pattern, using it for things such as MyStack. This makes your design not extensible. (-0.5)

==== Javadoc ==== [up to -3]

Mark: -3

Mark deductions:
- No Javadoc on classes (-1)
- No Javadoc for test cases (-1)
- Many methods don't have Javadoc. (-1)

==== Testing ==== [up to -6] 

Mark: -5

Mark deductions:
- Inadequate testing. Not all commands are tested. (-2)
- Code does not compile, and the fix is not simple. (-3)

==== Correctness ==== [up to -6]

Mark: -4

Mark deductions:
- "popd" not implemented (-1)
- "echo" creating new files is not supported, making "cat" unable to be tested (-1)

Test cases failed (-0.25 * 8 = -2):
1) Pushing invalid directory
    >pushd /hello
    Expected: It shouldn’t crash the program. A message as the directory stack is empty is preferable. Also a message for /hello being invalid.
    Actual: Crashes.

2) Making a directory given an absolute path
    >mkdir newFolder /newFolder/1
    >ls /newFolder/
    Expected: 1 should be created inside newFolder.
    Actual: Gives an error.

3) Listing a directory given an absolute path
    >ls /newFolder/
    Expected: 1 should be listed inside newFolder.
    Actual: Gives an error.

4) Making a directory with invalid name
    >mkdir “Hello” Hello$ .
    Expected: “Hello”, Hello$ and . should not be created since they use special characters.
    Actual: All are created.

5) Echoing with quotes
    >echo “Hello World”
    Expected: It should echo Hello World without quotes
    Actual: Shows it with quotes

6) Echoing without quotes
    >echo Hello World “
    Expected: It shouldn’t echo Hello World, since it is not enclosed in double quotes (as stated in the handout).
    Actual: Outputs it

7) Invalid truncating of history
    >history -1
    Expected: It shouldn’t crash the program, and having an error message would be preferable.
    Actual: Hangs the program.

8) Exit with whitespace
    >           exit
    Expected: It should exit the program successfully and not throw an error.
    Actual: Throws an error.
